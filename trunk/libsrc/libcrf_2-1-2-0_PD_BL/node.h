#ifndef CRFPP_NODE_H__
#define CRFPP_NODE_H__

#include <cmath>
#include "common.h"

#define LOG2               0.69314718055
//#define MINUS_LOG_EPSILON  50
#define MINUS_LOG_EPSILON  13


namespace CRFPP {

	static const double logsumexp_array_2_13_step01[] = {
		0.126928011043, 0.11551952318, 0.105083319769, 0.095545464598, 0.0868361521539, 0.0788897342925, 0.0716446919677, 0.0650435617766, 0.059032826288, 0.053562776218, 0.0485873515737, 0.0440639679386, 0.0399533331624, 0.0362192588707, 0.0328284704249, 0.0297504182726, 0.0269570930082, 0.0244228459338, 0.0221242164549, 0.0200397672604, 0.0181499279178, 0.0164368472529, 0.0148842546719, 0.013477330416, 0.0122025846077, 0.0110477448486, 0.0100016520557, 0.00905416416989, 0.00819606733827, 0.00741899414869, 0.00671534848912, 0.00607823660178, 0.00550140390966, 0.00497917720433, 0.00450641179925, 0.00407844327057, 0.00369104342695, 0.00334038017037, 0.00302298093083, 0.00273569937854, 0.00247568513773, 0.00224035624625, 0.00202737412384, 0.00183462083059, 0.00166017841405, 0.00150231015975, 0.00135944357526, 0.00123015495171, 0.00111315536046, 0.00100727795423, 0.000911466453774, 0.000824764711326, 0.000746307251828, 0.000675310701585, 0.000611066022253, 0.000552931475361, 0.000500326249386, 0.000452724687599, 0.000409651060525, 0.000370674832054, 0.000335406372896, 0.000303493079395, 0.000274615859585, 0.000248485951917, 0.000224842045312, 0.000203447672129, 0.000184088848276, 0.000166571937112, 0.000150721716007, 0.000136379626358, 0.000123402189723, 0.000111659574328, 0.0001010342977, 9.14200525379e-05, 8.27206441097e-05, 7.48490286292e-05, 6.77264430034e-05, 6.12816172966e-05, 5.54500620491e-05, 5.0173423349e-05, 4.53988992169e-05, 4.10787114834e-05, 3.71696278849e-05, 3.36325296059e-05, 3.04320199499e-05, 2.75360702288e-05, 2.49156993328e-05, 2.25446837799e-05, 2.03992953441e-05, 1.84580636446e-05, 1.67015613183e-05, 1.51122096299e-05, 1.36741025747e-05, 1.23728477178e-05, 1.11954221735e-05, 1.01300422896e-05, 9.16604572783e-06, 8.29378476726e-06, 7.50452975604e-06, 6.79038175264e-06, 6.14419347775e-06, 5.55949778751e-06, 5.03044295448e-06, 4.55173410396e-06, 4.11858022627e-06, 3.7266462281e-06, 3.37200954892e-06, 3.05112090331e-06, 2.76076876118e-06, 2.49804720581e-06
	};

	static const double logsumexp_array_0_2_step001[] = {
		0.69314718056, 0.688159680508, 0.683197179727, 0.678259676341, 0.673347167228, 0.668459648013, 0.663597113076, 0.658759555549, 0.653946967318, 0.649159339026, 0.644396660074, 0.639658918622, 0.634946101596, 0.630258194682, 0.625595182337, 0.62095704779, 0.616343773041, 0.611755338871, 0.607191724841, 0.602652909299, 0.598138869382, 0.593649581022, 0.589185018951, 0.584745156704, 0.580329966626, 0.575939419879, 0.571573486442, 0.567232135122, 0.56291533356, 0.558623048234, 0.554355244469, 0.550111886439, 0.54589293718, 0.541698358594, 0.537528111455, 0.533382155419, 0.52926044903, 0.525162949731, 0.521089613866, 0.517040396695, 0.5130152524, 0.509014134091, 0.505036993818, 0.50108378258, 0.497154450332, 0.493248945997, 0.489367217474, 0.485509211647, 0.481674874396, 0.477864150606, 0.47407698418, 0.470313318045, 0.466573094165, 0.46285625355, 0.459162736271, 0.455492481463, 0.451845427344, 0.448221511221, 0.444620669502, 0.441042837708, 0.437487950486, 0.433955941617, 0.430446744029, 0.426960289812, 0.423496510223, 0.420055335703, 0.416636695888, 0.413240519622, 0.409866734964, 0.406515269207, 0.403186048885, 0.399878999791, 0.39659404698, 0.393331114793, 0.390090126859, 0.386871006115, 0.383673674814, 0.380498054542, 0.377344066223, 0.374211630142, 0.371100665948, 0.368011092673, 0.364942828742, 0.361895791988, 0.35886989966, 0.355865068442, 0.352881214461, 0.349918253302, 0.346976100019, 0.344054669151, 0.341153874732, 0.338273630304, 0.33541384893, 0.332574443207, 0.32975532528, 0.326956406851, 0.324177599195, 0.321418813172, 0.318679959237, 0.315960947457, 0.313261687518, 0.310582088744, 0.307922060102, 0.30528151022, 0.302660347398, 0.300058479618, 0.297475814558, 0.294912259605, 0.292367721864, 0.289842108174, 0.287335325115, 0.284847279025, 0.282377876008, 0.279927021946, 0.277494622514, 0.275080583186, 0.272684809253, 0.270307205826, 0.267947677858, 0.265606130143, 0.263282467338, 0.260976593967, 0.258688414435, 0.256417833037, 0.254164753971, 0.251929081345, 0.249710719193, 0.247509571479, 0.245325542113, 0.243158534955, 0.241008453833, 0.238875202546, 0.236758684876, 0.234658804601, 0.2325754655, 0.230508571364, 0.228458026006, 0.226423733273, 0.224405597047, 0.222403521265, 0.220417409918, 0.218447167068, 0.21649269685, 0.214553903485, 0.212630691286, 0.21072296467, 0.20883062816, 0.2069535864, 0.205091744159, 0.203245006338, 0.201413277983, 0.199596464286, 0.197794470597, 0.19600720243, 0.194234565472, 0.192476465587, 0.190732808824, 0.189003501427, 0.187288449837, 0.185587560704, 0.183900740888, 0.182227897471, 0.180568937757, 0.178923769285, 0.177292299831, 0.175674437415, 0.174070090305, 0.172479167028, 0.170901576368, 0.169337227379, 0.167786029386, 0.166247891992, 0.16472272508, 0.163210438824, 0.16171094369, 0.160224150438, 0.158749970135, 0.157288314151, 0.155839094169, 0.154402222188, 0.152977610526, 0.151565171825, 0.150164819057, 0.148776465523, 0.147400024863, 0.146035411055, 0.144682538421, 0.14334132163, 0.142011675702, 0.140693516009, 0.139386758283, 0.138091318613, 0.136807113452, 0.135534059621, 0.134272074308, 0.133021075073, 0.131780979851, 0.130551706955, 0.129333175076, 0.128125303286
	};
	

// log(exp(x) + exp(y));
//    this can be used recursivly
// e.g., log(exp(log(exp(x) + exp(y))) + exp(z)) =
// log(exp (x) + exp(y) + exp(z))
	inline double logsumexp_old(double x, double y, bool flg) {
		
		if (flg) return y;  // init mode
		//return (x > y) ? x : y;
		
		const double vmin = (x < y) ? x : y;
		const double vmax = (x > y) ? x : y;
		if (vmax > vmin + MINUS_LOG_EPSILON) {
			//fprintf(stderr, " [%f,%f]vmax ", x, y);
			return vmax;
		} else {
			//fprintf(stderr, " [%f,%f]logexp ", x, y);
			//double ret_value = vmax + std::log(std::exp(vmin - vmax) + 1.0);
			//fprintf(stderr, "logsumexp(%f)vmax(%f)vmin(%f)log(%f)\n", ret_value, vmax, vmin, std::log(std::exp(vmin - vmax) + 1.0));
			//return ret_value;
			//double search_exp_tab = vmin - vmax;

			return vmax + std::log(std::exp(vmin - vmax) + 1.0);
		}
		
	}

	inline double logsumexp(double x, double y, bool flg) {
		
		if (flg) return y;  // init mode
		//return (x > y) ? x : y;
		
		const double vmin = (x < y) ? x : y;
		const double vmax = (x > y) ? x : y;
		if (vmax > vmin + MINUS_LOG_EPSILON) {
			//fprintf(stderr, " [%f,%f]vmax ", x, y);
			return vmax;
		} else {
			//fprintf(stderr, " [%f,%f]logexp ", x, y);
			//double ret_value = vmax + std::log(std::exp(vmin - vmax) + 1.0);
			//fprintf(stderr, "logsumexp(%f)vmax(%f)vmin(%f)log(%f)\n", ret_value, vmax, vmin, std::log(std::exp(vmin - vmax) + 1.0));
			//return ret_value;
			//double search_exp_tab = vmin - vmax;

			// < 13 && >= 2,search logsumexp_array_2_13_step01
			double v_diff = vmax - vmin;
			if(v_diff < 13 && v_diff >= 2){
				return vmax + logsumexp_array_2_13_step01[int((v_diff-2)*10)];
			}else if(v_diff < 2){ // < 2, search logsumexp_array_0_2_step001
				return vmax + logsumexp_array_0_2_step001[int(v_diff*100)];
			}else{
				return vmax;
			}
		}
		
	}

	inline double logsumexp_new(double x, double y, bool flg) {
		
		if (flg) return y;  // init mode
		//return (x > y) ? x : y;
		
		const double vmin = (x < y) ? x : y;
		const double vmax = (x > y) ? x : y;
		if (vmax > vmin + MINUS_LOG_EPSILON) {
			//fprintf(stderr, " [%f,%f]vmax ", x, y);
			return vmax;
		} else {
			//fprintf(stderr, " [%f,%f]logexp ", x, y);
			//double return vmax + std::log(std::exp(vmin - vmax) + 1.0);
			//fprintf(stderr, "logsumexp(%f)vmax(%f)vmin(%f)log(%f)\n", ret_value, vmax, vmin, std::log(std::exp(vmin - vmax) + 1.0));
			//return ret_value;
			//double search_exp_tab = vmin - vmax;
			double v_diff = vmax - vmin;
			/*
			if(v_diff > 13){
				return vmax;
			}else if(v_diff < 13 && v_diff >= 12){
				return vmax + 0.0000061442;
			}else if(v_diff < 12 && v_diff >= 11){ return vmax + 0.0000167016;
			}else if(v_diff < 11 && v_diff >= 10){
				return vmax + 0.0000453989;
			}else if(v_diff < 10 && v_diff >= 9){
				return vmax + 0.0001234022;
			}else if(v_diff < 9 && v_diff >= 8){
				return vmax + 0.0003354064;
			}else if(v_diff < 8 && v_diff >= 7){
				return vmax + 0.0009114665;
			}else if(v_diff < 7 && v_diff >= 6){
				return vmax + 0.0024756851;
			}else if(v_diff < 6 && v_diff >= 5){
				return vmax + 0.0067153485;
			*/
			//
			if(v_diff >= 6){
				return vmax + 0.0024756851;
			}else if(v_diff < 6 && v_diff >= 5){
				return vmax + 0.0067153485;		
			}else if(v_diff < 5 && v_diff >= 4.5){
				return vmax + 0.0110477448;
			}else if(v_diff < 4.5 && v_diff >= 4){
				return vmax + 0.0181499279;
			}else if(v_diff < 4 && v_diff >= 3.5){
				return vmax + 0.0297504183;
			}else if(v_diff < 3.5 && v_diff >= 3){
				return vmax + 0.0485873516;
			}else if(v_diff < 3 && v_diff >= 2.5){
				return vmax + 0.0788897343;
			}else if(v_diff < 2.5 && v_diff >= 2 ){
				return vmax + 0.1269280110;
			}else if(v_diff < 2 && v_diff >= 1.9){
				return vmax + 0.1393867583;
			}else if(v_diff < 1.9 && v_diff >= 1.8){
				return vmax + 0.1529776105;
			}else if(v_diff < 1.8 && v_diff >= 1.7){
				return vmax + 0.1677860294;
			}else if(v_diff < 1.7 && v_diff >= 1.6){
				return vmax + 0.1839007409;
			}else if(v_diff < 1.6 && v_diff >= 1.5){
				return vmax + 0.2014132780;
			}else if(v_diff < 1.5 && v_diff >= 1.4){
				return vmax + 0.2204174099;
			}else if(v_diff < 1.4 && v_diff >= 1.3){
				return vmax + 0.2410084538;
			}else if(v_diff < 1.3 && v_diff >= 1.2){
				return vmax + 0.2632824673;
			}else if(v_diff < 1.2 && v_diff >= 1.1){
				return vmax + 0.2873353251;
			}else if(v_diff < 1.1 && v_diff >= 1.0){
				return vmax + 0.3132616875;
			}else if(v_diff < 1.0 && v_diff >= 0.9){
				return vmax + 0.3411538747;
			}else if(v_diff < 0.9 && v_diff >= 0.8){
				return vmax + 0.3711006659;
			}else if(v_diff < 0.8 && v_diff >= 0.7){
				return vmax + 0.4031860489;
			}else if(v_diff < 0.7 && v_diff >= 0.6){
				return vmax + 0.4374879505;
			}else if(v_diff < 0.6 && v_diff >= 0.5){
				return vmax + 0.4740769842;
			}else if(v_diff < 0.5 && v_diff >= 0.4){
				return vmax + 0.5130152524;
			}else if(v_diff < 0.4 && v_diff >= 0.3){
				return vmax + 0.5543552445;
			}else if(v_diff < 0.3 && v_diff >= 0.2){
				return vmax + 0.5981388694;
			}else if(v_diff < 0.2 && v_diff >= 0.1){
				return vmax + 0.6443966601;
			}else if(v_diff < 0.1 && v_diff >= 0.05){
				return vmax + 0.6684596480;
			}else{
				return vmax + 0.6931471806;
			}
			//return vmax + vmax + std::log(std::exp(vmin - vmax) + 1.0);
		}
		
	}
	
	struct Node {
		unsigned short int   x;
		unsigned short int   y;
		double               alpha;
		double              beta;
		//double               cost;
		//double               bestCost;
		int cost;
		int bestCost;
		Node                *prev;	
		void clear() {
			x = y = 0;
			alpha = beta = 0.0;
			cost = 0;
			prev = 0;
		}
		
	Node(): x(0), y(0), alpha(0.0), beta(0.0),
			cost(0), bestCost(0), prev(0) {}
	};
}

#endif
